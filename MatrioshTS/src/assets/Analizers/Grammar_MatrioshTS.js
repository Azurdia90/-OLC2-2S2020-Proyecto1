/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar_MatrioshTS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,26],$V1=[1,23],$V2=[1,24],$V3=[1,25],$V4=[1,27],$V5=[1,28],$V6=[1,29],$V7=[1,31],$V8=[1,30],$V9=[1,32],$Va=[1,33],$Vb=[1,34],$Vc=[1,6],$Vd=[1,7],$Ve=[5,31,34,38,39,40,48,54,55,56,62,63,64,65,68],$Vf=[5,31,34,38,39,40,44,48,52,53,54,55,56,62,63,64,65,68],$Vg=[1,48],$Vh=[1,53],$Vi=[1,56],$Vj=[1,59],$Vk=[1,57],$Vl=[1,58],$Vm=[1,62],$Vn=[1,63],$Vo=[1,83],$Vp=[1,77],$Vq=[1,82],$Vr=[1,81],$Vs=[1,84],$Vt=[1,85],$Vu=[1,86],$Vv=[1,87],$Vw=[1,93],$Vx=[11,33,35,36],$Vy=[11,33,35,42,78,79,80,81,82,83,84,85,86,87,88,89,90,94,98],$Vz=[11,33,35,36,42,78,79,80,81,82,83,84,85,86,87,88,89,90,94,97,98,99],$VA=[1,116],$VB=[1,117],$VC=[1,118],$VD=[1,119],$VE=[1,120],$VF=[1,121],$VG=[1,122],$VH=[1,123],$VI=[1,124],$VJ=[1,125],$VK=[1,126],$VL=[1,127],$VM=[1,128],$VN=[1,129],$VO=[1,137],$VP=[1,139],$VQ=[1,140],$VR=[1,141],$VS=[1,142],$VT=[1,143],$VU=[33,42],$VV=[31,34,38,39,40,44,48,52,53,54,55,56,62,63,64],$VW=[1,179],$VX=[11,33,36,42,43,44],$VY=[11,33,35,42,78,79,83,84,85,86,87,88,89,90,94,98],$VZ=[11,33,35,42,83,84,85,86,87,88,89,90,94,98],$V_=[11,33,35,42,87,88,89,90,94,98],$V$=[33,44],$V01=[1,213],$V11=[44,52,53],$V21=[1,259],$V31=[5,31,34,38,39,40,44,46,48,52,53,54,55,56,62,63,64,65,68];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"BODY_MATRIOSHTS":3,"LISTA_CONTENIDO":4,"EOF":5,"TYPES":6,"FUNCION":7,"SENTENCIA":8,"LISTA_SENTENCIAS":9,"SENTENCIA_DECLARACION":10,"s_dot_coma":11,"SENTENCIA_ASIGNACION":12,"SENTENCIA_IF":13,"SENTENCIA_SWITCH":14,"SENTENCIA_WHILE":15,"SENTENCIA_FOR":16,"SENTENCIA_FOR_LIST":17,"SENTENCIA_DO_WHILE":18,"OPERADOR_INCREMENTO":19,"OPERADOR_DECREMENTO":20,"SENTENCIA_LLAMADA":21,"SENTENCIA_ACCESO":22,"SENTENCIA_BREAK":23,"SENTENCIA_CONTINUE":24,"SENTENCIA_RETURN":25,"TIPO":26,"r_void":27,"r_nulo":28,"r_boolean":29,"r_number":30,"identificador":31,"LISTA_IDENTIFICADORES":32,"s_coma":33,"r_var":34,"s_doble_dot":35,"s_asign":36,"EXPRESION":37,"r_let":38,"r_const":39,"r_if":40,"s_par_open":41,"s_par_close":42,"s_key_open":43,"s_key_close":44,"LISTA_ELSE_IF":45,"r_else":46,"SENTENCIA_ELSE_IF":47,"r_switch":48,"LISTA_CASOS":49,"DEFECTO":50,"CASO":51,"r_case":52,"r_default":53,"r_while":54,"r_do":55,"r_for":56,"let":57,"r_in":58,"identidicador":59,"identificdor":60,"r_of":61,"r_break":62,"r_continue":63,"r_return":64,"r_type":65,"LISTA_ATRIBUTOS":66,"ATRIBUTO":67,"r_function":68,"LISTA_PARAMETROS":69,"DECLARACION_PARAMETRO":70,"LISTA_EXPRESIONES":71,"EXPRESION_ARITMETICA":72,"EXPRESION_RELACIONAL":73,"EXPRESION_LOGICA":74,"OPERADOR_UNARIO":75,"OPERADOR_TERNARIO":76,"DATO_PRIMITIVO":77,"s_plus":78,"s_minus":79,"s_mul":80,"s_div":81,"s_mod":82,"s_greather":83,"s_less":84,"s_greather_equal":85,"s_less_equal":86,"s_equal":87,"s_not_equal":88,"s_or":89,"s_and":90,"s_not":91,"s_increment":92,"s_decrement":93,"s_ternario":94,"LISTA_ACCESOS":95,"ACCESO":96,"s_cor_open":97,"s_cor_close":98,"s_dot":99,"nulo":100,"boolean":101,"number":102,"string":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"s_dot_coma",27:"r_void",28:"r_nulo",29:"r_boolean",30:"r_number",31:"identificador",33:"s_coma",34:"r_var",35:"s_doble_dot",36:"s_asign",38:"r_let",39:"r_const",40:"r_if",41:"s_par_open",42:"s_par_close",43:"s_key_open",44:"s_key_close",46:"r_else",48:"r_switch",52:"r_case",53:"r_default",54:"r_while",55:"r_do",56:"r_for",57:"let",58:"r_in",59:"identidicador",60:"identificdor",61:"r_of",62:"r_break",63:"r_continue",64:"r_return",65:"r_type",68:"r_function",78:"s_plus",79:"s_minus",80:"s_mul",81:"s_div",82:"s_mod",83:"s_greather",84:"s_less",85:"s_greather_equal",86:"s_less_equal",87:"s_equal",88:"s_not_equal",89:"s_or",90:"s_and",91:"s_not",92:"s_increment",93:"s_decrement",94:"s_ternario",97:"s_cor_open",98:"s_cor_close",99:"s_dot",100:"nulo",101:"boolean",102:"number",103:"string"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[9,2],[9,1],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[26,1],[26,1],[26,1],[26,1],[26,1],[32,3],[32,1],[10,6],[10,4],[10,4],[10,2],[10,6],[10,4],[10,4],[10,2],[10,6],[10,4],[12,3],[12,3],[13,12],[13,11],[13,8],[13,7],[45,2],[45,1],[47,8],[14,8],[14,7],[49,2],[49,1],[51,4],[50,3],[15,7],[18,8],[16,11],[16,11],[17,10],[17,10],[23,1],[24,1],[25,2],[25,1],[6,7],[66,3],[66,1],[67,3],[7,10],[7,9],[7,8],[7,7],[69,3],[69,1],[70,3],[71,3],[71,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,3],[37,1],[37,1],[37,1],[72,3],[72,3],[72,3],[72,3],[72,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[74,3],[74,3],[74,2],[75,2],[19,2],[20,2],[76,5],[22,2],[95,2],[95,1],[96,3],[96,2],[96,2],[21,4],[21,3],[77,1],[77,1],[77,1],[77,1],[77,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 3: case 4: case 8: case 48: case 53:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
      
break;
case 5: case 6: case 7: case 9: case 49: case 54: case 76: case 79:

        this.$ = [$$[$0]];
      
break;
case 10: case 11: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 87:
this.$ = $$[$0-1];
break;
case 12: case 13: case 14: case 15: case 16: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 88: case 89: case 90:
this.$ = $$[$0];
break;
case 25:
this.$ = {etiqueta: 'tipo', tipo: 0, valor: $$[$0]};
break;
case 26:
this.$ = {etiqueta: 'tipo', tipo: 1, valor: $$[$0]};
break;
case 27:
this.$ = {etiqueta: 'tipo', tipo: 2, valor: $$[$0]};
break;
case 28:
this.$ = {etiqueta: 'tipo', tipo: 3, valor: $$[$0]};
break;
case 29:

        if($$[$0].toLowerCase() == "String")
        {
          this.$ = {etiqueta: 'tipo', tipo: 4, valor: $$[$0]};
        }
        else
        {
          this.$ = {etiqueta: 'tipo', tipo: 5, valor: $$[$0]};
        }
      
break;
case 30:
 
        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
      
break;
case 31:
 this.$ = [$$[$0]];
break;
case 32: case 36:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-4], tipo: $$[$0-2], valor: $$[$0]};
      
break;
case 33:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: $$[$0], valor: null};      
      
break;
case 34: case 38:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: null, valor: $$[$0]};
      
break;
case 35: case 39:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0], tipo: null, valor: null};
      
break;
case 37:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: $$[$0], valor: null};
      
break;
case 40:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: true, identificador: $$[$0-4], tipo: $$[$0-2], valor: $$[$0]};      
      
break;
case 41:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: true, identificador: $$[$0-2], tipo: null, valor: $$[$0]};      
      
break;
case 42:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_asignacion', linea: linea, columna: columna, tipo: 0, acceso0: $$[$0-2], acceso1: null, valor: $$[$0]}; 
    
break;
case 43:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_asignacion', linea: linea, columna: columna, tipo: 1, acceso0: null, acceso1: $$[$0-2], valor: $$[$0]};
    
break;
case 44:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-9], sentencias1: $$[$0-6], lista_else_if: $$[$0-4], sentencias2: $$[$0-1]};
      
break;
case 45:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-8], sentencias1: $$[$0-5], lista_else_if: null, sentencias2: $$[$0-1]};
      
break;
case 46:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-5], sentencias1: $$[$0-2], lista_else_if: $$[$0], sentencias2: null};
      
break;
case 47:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-4], sentencias1: $$[$0-1], lista_else_if: null, sentencias2: null};      
      
break;
case 50:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion: $$[$0-4], sentencias1: $$[$0-1], lista_else_if: null, sentencias2: null};
      
break;
case 51:

        var linea = yylineno;
        var columna = yyleng;
        $$[$0-2].push($$[$0-1]);
        this.$ = {etiqueta: 'sentencia_switch', linea: linea, columna: columna, condicion: $$[$0-5], lista_casos: $$[$0-2]};
      
break;
case 52:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_switch', linea: linea, columna: columna, condicion: $$[$0-4], lista_casos: $$[$0-1]};
      
break;
case 55:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_caso', linea: linea, columna: columna, default: false, condicion : $$[$0-2], lista_sentencias: $$[$0]};
      
break;
case 56:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_caso', linea: linea, columna: columna, default: true, condicion : null, lista_sentencias: $$[$0]};
      
break;
case 57:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_while', linea: linea, columna: columna, condicion: $$[$0-4], sentencias: $$[$0-1]};
      
break;
case 58:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_do_while', linea: linea, columna: columna, condicion: $$[$0-1], sentencias: $$[$0-5]};
      
break;
case 59:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_for', linea: linea, columna: columna, sentencia1: $$[$0-8], sentencia2: $$[$0-6], sentencia3: $$[$0-4], lista_sentencias: $$[$0-1]};   
      
break;
case 60:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_for', linea: linea, columna: columna, sentencia1: $$[$0-8], sentencia2: $$[$0-6], sentencia3: $$[$0-4], lista_sentencias: $$[$0-1]};
      
break;
case 61:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_for_list', linea: linea, columna: columna, id1: $$[$0-6], id2: $$[$0-4], lista_sentencias: $$[$0-1]};   
      
break;
case 62:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_for_list', linea: linea, columna: columna, id1: $$[$0-7], id2: $$[$0-5], lista_sentencias: $$[$0-1]};
      
break;
case 63:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_break', linea: linea, columna: columna};
      
break;
case 64:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_continue', linea: linea, columna: columna};
      
break;
case 65:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_return', linea: linea, valor: $$[$0]};
      
break;
case 66:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_return', linea: linea, valor: null};
      
break;
case 67:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'type', linea: linea, columna: columna, identificador: $$[$0-5], lista_atributos: $$[$0-2]};
    
break;
case 68:

      $$[$0-2].push($$[$0-1]);
      this.$ = $$[$0-2];
    
break;
case 69: case 111:

      this.$ = [$$[$0]];
    
break;
case 70:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'atributo', linea: linea, columna: columna, valor: $$[$0-2], tipo: $$[$0]};
    
break;
case 71:

        var linea = yylineno;
        var columna = yyleng;

        this.$ = {etiqueta: 'funcion', linea: linea, columna: columna, identificador: $$[$0-8], tipo: $$[$0-3], lista_parametros: $$[$0-6], lista_sentencias: $$[$0-1]};   
      
break;
case 72:

        var linea = yylineno;
        var columna = yyleng;

        this.$ = {etiqueta: 'funcion', linea: linea, columna: columna, identificador: $$[$0-7], tipo: $$[$0-3], lista_parametros: null, lista_sentencias: $$[$0-1]};
      
break;
case 73:

        var linea = yylineno;
        var columna = yyleng;

        this.$ = {etiqueta: 'funcion', linea: linea, columna: columna, identificador: $$[$0-6], tipo: null, lista_parametros: $$[$0-4], lista_sentencias: $$[$0-1]};       
      
break;
case 74:

        var linea = yylineno;
        var columna = yyleng;

        this.$ = {etiqueta: 'funcion', linea: linea, columna: columna, identificador: $$[$0-5], tipo: null, lista_parametros: null, lista_sentencias: $$[$0-1]};
      
break;
case 75: case 78:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
      
break;
case 77:

        var linea = yylineno;
        var columna = yyleng;

        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: [$$[$0-2]], tipo: $$[$0], valor: null};
      
break;
case 91:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'suma', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 92:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'resta', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 93:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'multiplicacion', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 94:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'division', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 95:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'modulo', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 96:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'mayor_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 97:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'menor_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 98:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'mayor_igual_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 99:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'menor_igual_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 100:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'igual_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 101:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'diferente_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 102:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'or', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 103:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'and', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 104:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'not', linea: linea, columna: columna, expresion1: $$[$0]};
      
break;
case 105:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'operador_unario', linea: linea, columna: columna, expresion1: $$[$0]};
      
break;
case 106:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'operador_incremento', linea: linea, columna: columna, expresion1: {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 5, valor: $$[$0-1]}, valor: $$[$0-1]}};
      
break;
case 107:

        var linea = yylineno;
        var columna = yyleng; 
        this.$ = {etiqueta: 'operador_decremento', linea: linea, columna: columna, expresion1: {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 5, valor: $$[$0-1]}, valor: $$[$0-1]}};
      
break;
case 108:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: "operador_ternario", linea: linea, columna: columna, condicion: $$[$0-4] , expresion1: $$[$0-2], expresion2: $$[$0]};
    
break;
case 109:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_acceso', linea: linea, columna: columna, identificador: $$[$0-1], lista_acceso: $$[$0]};
    
break;
case 110:

      $$[$0-1].push($$[$0]);
      this.$ = $$[$0-1];
    
break;
case 112:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'tipo_acceso', linea: linea, columna: columna, tipo: 0, acceso0: $$[$0-1], acceso1: null, acceso2: null};
    
break;
case 113:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'tipo_acceso', linea: linea, columna: columna, tipo: 2, acceso0: null, acceso1: null, acceso2: $$[$0]};
    
break;
case 114:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'tipo_acceso', linea: linea, columna: columna, tipo: 1, acceso0: null, acceso1: $$[$0], acceso2: null};
    
break;
case 115:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_llamada', linea: linea, columna: columna, identificador: $$[$0-3], parametros: $$[$0-1]};
    
break;
case 116:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_llamada', linea: linea, columna: columna, identificador: $$[$0-2], parametros: []};
    
break;
case 117:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 1, valor: $$[$0]}, valor: yytext}; 
      
break;
case 118:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 2, valor: $$[$0]}, valor: yytext}; 
      
break;
case 119:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 3, valor: $$[$0]}, valor: yytext};
      
break;
case 120:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 4, valor: $$[$0]}, valor:  yytext};
      
break;
case 121:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 5, valor: $$[$0]}, valor: yytext};
      
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,68:$Vd},{1:[3]},{5:[1,35],6:36,7:37,8:38,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb,65:$Vc,68:$Vd},o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),{31:[1,39]},{31:[1,40]},{11:[1,41]},{11:[1,42]},o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),{11:[1,43]},{11:[1,44]},{11:[1,45]},{11:[1,46]},{11:[1,47],36:$Vg},{11:[1,49]},{11:[1,50]},{11:[1,51]},{31:$Vh,32:52},{31:$Vh,32:54},{31:$Vh,32:55},{36:$Vi,41:$Vj,92:$Vk,93:$Vl,95:60,96:61,97:$Vm,99:$Vn},{41:[1,64]},{41:[1,65]},{41:[1,66]},{41:[1,67]},{43:[1,68]},{11:[2,63]},{11:[2,64]},{11:[2,66],19:74,20:75,21:78,22:79,31:$Vo,37:69,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,3]),o($Ve,[2,4]),{36:[1,88]},{41:[1,89]},o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),o($Vf,[2,21]),{19:74,20:75,21:78,22:79,31:$Vo,37:90,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($Vf,[2,22]),o($Vf,[2,23]),o($Vf,[2,24]),{11:[2,35],33:$Vw,35:[1,91],36:[1,92]},o($Vx,[2,31]),{11:[2,39],33:$Vw,35:[1,94],36:[1,95]},{33:$Vw,35:[1,96],36:[1,97]},{19:74,20:75,21:78,22:79,31:$Vo,37:98,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($Vy,[2,106]),o($Vy,[2,107]),{19:74,20:75,21:78,22:79,31:$Vo,37:101,41:$Vp,42:[1,100],71:99,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o([11,33,35,36,42,78,79,80,81,82,83,84,85,86,87,88,89,90,94,98],[2,109],{96:102,97:$Vm,99:$Vn}),o($Vz,[2,111]),{19:74,20:75,21:78,22:79,31:$Vo,37:103,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{21:104,31:[1,105]},{19:74,20:75,21:78,22:79,31:$Vo,37:106,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:107,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:108,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{10:109,12:110,22:113,31:[1,112],34:$V1,38:$V2,39:$V3,57:[1,111]},{8:115,9:114,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{11:[2,65],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},o($Vy,[2,80]),o($Vy,[2,81]),o($Vy,[2,82]),o($Vy,[2,83]),o($Vy,[2,84]),o($Vy,[2,85]),o($Vy,[2,86]),{19:74,20:75,21:78,22:79,31:$Vo,37:130,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($Vy,[2,88]),o($Vy,[2,89]),o($Vy,[2,90]),{19:74,20:75,21:78,22:79,31:$Vo,37:131,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:132,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($Vy,[2,121],{95:60,96:61,41:$Vj,92:$Vk,93:$Vl,97:$Vm,99:$Vn}),o($Vy,[2,117]),o($Vy,[2,118]),o($Vy,[2,119]),o($Vy,[2,120]),{43:[1,133]},{31:$VO,42:[1,135],69:134,70:136},{11:[2,43],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{26:138,27:$VP,28:$VQ,29:$VR,30:$VS,31:$VT},{19:74,20:75,21:78,22:79,31:$Vo,37:144,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{31:[1,145]},{26:146,27:$VP,28:$VQ,29:$VR,30:$VS,31:$VT},{19:74,20:75,21:78,22:79,31:$Vo,37:147,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{26:148,27:$VP,28:$VQ,29:$VR,30:$VS,31:$VT},{19:74,20:75,21:78,22:79,31:$Vo,37:149,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{11:[2,42],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{33:[1,151],42:[1,150]},o($Vz,[2,116]),o($VU,[2,79],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN}),o($Vz,[2,110]),{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN,98:[1,152]},o($Vz,[2,113]),o($Vz,[2,114],{41:$Vj}),{42:[1,153],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{42:[1,154],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{42:[1,155],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{11:[1,156]},{11:[1,157]},{31:[1,158],60:[1,159]},{36:$Vi,95:60,96:61,97:$Vm,99:$Vn},{36:$Vg},{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,160],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},o($VV,[2,9]),{19:74,20:75,21:78,22:79,31:$Vo,37:162,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:163,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:164,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:165,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:166,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:167,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:168,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:169,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:170,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:171,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:172,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:173,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:174,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:175,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{42:[1,176],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},o($Vy,[2,104]),o($Vy,[2,105]),{31:$VW,66:177,67:178},{33:[1,181],42:[1,180]},{35:[1,182],43:[1,183]},o($VU,[2,76]),{35:[1,184]},{11:[2,33],36:[1,185]},o($VX,[2,25]),o($VX,[2,26]),o($VX,[2,27]),o($VX,[2,28]),o($VX,[2,29]),{11:[2,34],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},o($Vx,[2,30]),{11:[2,37],36:[1,186]},{11:[2,38],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{36:[1,187]},{11:[2,41],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},o($Vz,[2,115]),{19:74,20:75,21:78,22:79,31:$Vo,37:188,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($Vz,[2,112]),{43:[1,189]},{43:[1,190]},{43:[1,191]},{19:74,20:75,21:78,22:79,31:$Vo,37:192,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:193,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{58:[1,194]},{61:[1,195]},{54:[1,196]},o($VV,[2,8]),o($VY,[2,91],{80:$VC,81:$VD,82:$VE}),o($VY,[2,92],{80:$VC,81:$VD,82:$VE}),o($Vy,[2,93]),o($Vy,[2,94]),o($Vy,[2,95]),o($VZ,[2,96],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE}),o($VZ,[2,97],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE}),o($VZ,[2,98],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE}),o($VZ,[2,99],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE}),o($V_,[2,100],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI}),o($V_,[2,101],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI}),o([11,33,35,42,89,94,98],[2,102],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,90:$VM}),o([11,33,35,42,89,90,94,98],[2,103],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK}),{35:[1,197],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},o($Vy,[2,87]),{33:[1,199],44:[1,198]},o($V$,[2,69]),{35:[1,200]},{35:[1,201],43:[1,202]},{31:$VO,70:203},{26:204,27:$VP,28:$VQ,29:$VR,30:$VS,31:$VT},{8:115,9:205,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{26:206,27:$VP,28:$VQ,29:$VR,30:$VS,31:$VT},{19:74,20:75,21:78,22:79,31:$Vo,37:207,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:208,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:209,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o($VU,[2,78],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN}),{8:115,9:210,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{49:211,51:212,52:$V01},{8:115,9:214,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{11:[1,215],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{11:[1,216],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{59:[1,217]},{31:[1,218]},{41:[1,219]},{19:74,20:75,21:78,22:79,31:$Vo,37:220,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{11:[1,221]},{31:$VW,67:222},{26:223,27:$VP,28:$VQ,29:$VR,30:$VS,31:$VT},{26:224,27:$VP,28:$VQ,29:$VR,30:$VS,31:$VT},{8:115,9:225,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},o($VU,[2,75]),{43:[1,226]},{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,227],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},o($VU,[2,77]),{11:[2,32],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{11:[2,36],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{11:[2,40],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,228],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{44:[1,230],50:229,51:231,52:$V01,53:[1,232]},o($V11,[2,54]),{19:74,20:75,21:78,22:79,31:$Vo,37:233,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,234],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{19:74,20:75,21:78,22:79,31:$Vo,37:235,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{19:74,20:75,21:78,22:79,31:$Vo,37:236,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{42:[1,237]},{42:[1,238]},{19:74,20:75,21:78,22:79,31:$Vo,37:239,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},o([11,33,35,42,98],[2,108],{78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN}),o($Ve,[2,67]),o($V$,[2,68]),o($V$,[2,70]),{43:[1,240]},{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,241],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{8:115,9:242,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},o($Ve,[2,74]),o($Vf,[2,47],{45:243,47:245,46:[1,244]}),{44:[1,246]},o($Vf,[2,52]),o($V11,[2,53]),{35:[1,247]},{35:[1,248],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},o($Vf,[2,57]),{42:[1,249],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{42:[1,250],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{43:[1,251]},{43:[1,252]},{42:[1,253],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},{8:115,9:254,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},o($Ve,[2,73]),{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,255],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},o($Vf,[2,46],{47:257,46:[1,256]}),{40:$V21,43:[1,258]},o($V31,[2,49]),o($Vf,[2,51]),{8:115,9:260,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{8:115,9:261,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{43:[1,262]},{43:[1,263]},{8:115,9:264,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{8:115,9:265,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{11:[2,58]},{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,266],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},o($Ve,[2,72]),{40:$V21,43:[1,267]},o($V31,[2,48]),{8:115,9:268,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{41:[1,269]},{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[2,56],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},o($V11,[2,55],{10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,8:161,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb}),{8:115,9:270,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{8:115,9:271,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,272],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,273],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},o($Ve,[2,71]),{8:115,9:274,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,275],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{19:74,20:75,21:78,22:79,31:$Vo,37:276,41:$Vp,72:70,73:71,74:72,75:73,76:76,77:80,79:$Vq,91:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv},{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,277],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,278],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},o($Vf,[2,61]),o($Vf,[2,62]),{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,279],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},o($Vf,[2,45]),{42:[1,280],78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,94:$VN},o($Vf,[2,59]),o($Vf,[2,60]),o($Vf,[2,44]),{43:[1,281]},{8:115,9:282,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},{8:161,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,31:$V0,34:$V1,38:$V2,39:$V3,40:$V4,44:[1,283],48:$V5,54:$V6,55:$V7,56:$V8,62:$V9,63:$Va,64:$Vb},o($V31,[2,50])],
defaultActions: {32:[2,63],33:[2,64],35:[2,1],253:[2,58]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 'r_import'
break;
case 2:return 27
break;
case 3:return 29
break;
case 4:return 30
break;
case 5:return 'r_string'
break;
case 6:return 'r_public'
break;
case 7:return 'r_private'
break;
case 8:return 34
break;
case 9:return 38
break;
case 10:return 39
break;
case 11:return 65
break;
case 12:return 68
break;
case 13:return 40
break;
case 14:return 46
break;
case 15:return 48
break;
case 16:return 52
break;
case 17:return 53
break;
case 18:return 55
break;
case 19:return 54
break;
case 20:return 56
break;
case 21:return 58
break;
case 22:return 61
break;
case 23:return 63
break;
case 24:return 62
break;
case 25:return 64
break;
case 26:return 101
break;
case 27:return 101
break;
case 28:return 102
break;
case 29:return 103
break;
case 30:return 103
break;
case 31:return 100
break;
case 32:return 87
break;
case 33:return 36
break;
case 34:return 92
break;
case 35:return 93
break;
case 36:return 78
break;
case 37:return 79
break;
case 38:return 80
break;
case 39:return 81 
break;
case 40:return 82
break;
case 41:return 88
break;
case 42:return 86
break;
case 43:return 85
break;
case 44:return 84
break;
case 45:return 83
break;
case 46:return 89
break;
case 47:return 90
break;
case 48:return 91
break;
case 49:return 41
break;
case 50:return 42
break;
case 51:return 94
break;
case 52:return 43
break;
case 53:return 44
break;
case 54:return 97
break;
case 55:return 98
break;
case 56:return 99
break;
case 57:return 33
break;
case 58:return 35
break;
case 59:return 11
break;
case 60:return 31
break;
case 61:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:import\b)/,/^(?:void\b)/,/^(?:boolean\b)/,/^(?:number\b)/,/^(?:String\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:type\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:'[^"'"]*')/,/^(?:"[^"\""]*")/,/^(?:null\b)/,/^(?:==)/,/^(?:=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:([a-zA-ZñÑ]|(_[a-zA-ZñÑ]))([a-zA-ZñÑ]|_|[0-9])*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar_MatrioshTS;
exports.Parser = Grammar_MatrioshTS.Parser;
exports.parse = function () { return Grammar_MatrioshTS.parse.apply(Grammar_MatrioshTS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}