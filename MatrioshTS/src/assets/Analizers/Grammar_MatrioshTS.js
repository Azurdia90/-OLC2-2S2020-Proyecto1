/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar_MatrioshTS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[5,21,24,28,29,39,40,41],$V8=[1,30],$V9=[1,34],$Va=[1,37],$Vb=[1,38],$Vc=[1,51],$Vd=[1,46],$Ve=[1,50],$Vf=[1,49],$Vg=[1,52],$Vh=[1,53],$Vi=[1,54],$Vj=[1,55],$Vk=[1,59],$Vl=[9,23,25,26],$Vm=[9,23,26,33,50,51,52,53,54,55,56,57,58,59,60,61,62,68,69,70],$Vn=[1,72],$Vo=[1,73],$Vp=[1,74],$Vq=[1,75],$Vr=[1,76],$Vs=[1,77],$Vt=[1,78],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[9,23,33,50,51,52,53,54,55,56,57,58,59,60,61,62,69],$VB=[1,91],$VC=[1,92],$VD=[1,93],$VE=[1,94],$VF=[1,95],$VG=[23,33],$VH=[9,26],$VI=[9,23,33,50,51,55,56,57,58,59,60,61,62,69],$VJ=[9,23,33,55,56,57,58,59,60,61,62,69],$VK=[9,23,33,59,60,61,62,69];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"BODY_MATRIOSHTS":3,"LISTA_CONTENIDO":4,"EOF":5,"LISTA_SENTENCIAS":6,"SENTENCIA":7,"SENTENCIA_DECLARACION":8,"s_dot_coma":9,"SENTENCIA_ASIGNACION":10,"SENTENCIA_LLAMADA":11,"SENTENCIA_ACCESO":12,"SENTENCIA_BREAK":13,"SENTENCIA_CONTINUE":14,"SENTENCIA_RETURN":15,"TIPO":16,"r_void":17,"r_nulo":18,"r_boolean":19,"r_number":20,"identificador":21,"LISTA_IDENTIFICADORES":22,"s_coma":23,"r_var":24,"s_doble_dot":25,"s_asign":26,"EXPRESION":27,"r_let":28,"r_const":29,"SENTENCIA_IF":30,"r_if":31,"s_par_open":32,"s_par_close":33,"s_key_open":34,"s_key_close":35,"LISTA_ELSE_IF":36,"r_else":37,"SENTENCIA_ELSE_IF":38,"r_break":39,"r_continue":40,"r_return":41,"LISTA_EXPRESIONES":42,"EXPRESION_ARITMETICA":43,"EXPRESION_RELACIONAL":44,"EXPRESION_LOGICA":45,"OPERADOR_UNARIO":46,"OPERADOR_INCREMENTO":47,"OPERADOR_DECREMENTO":48,"DATO_PRIMITIVO":49,"s_plus":50,"s_minus":51,"s_mul":52,"s_div":53,"s_mod":54,"s_greather":55,"s_less":56,"s_greather_equal":57,"s_less_equal":58,"s_equal":59,"s_not_equal":60,"s_or":61,"s_and":62,"s_not":63,"s_increment":64,"s_decrement":65,"LISTA_ACCESOS":66,"ACCESO":67,"s_cor_open":68,"s_cor_close":69,"s_dot":70,"nulo":71,"boolean":72,"number":73,"string":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"s_dot_coma",17:"r_void",18:"r_nulo",19:"r_boolean",20:"r_number",21:"identificador",23:"s_coma",24:"r_var",25:"s_doble_dot",26:"s_asign",28:"r_let",29:"r_const",31:"r_if",32:"s_par_open",33:"s_par_close",34:"s_key_open",35:"s_key_close",37:"r_else",39:"r_break",40:"r_continue",41:"r_return",50:"s_plus",51:"s_minus",52:"s_mul",53:"s_div",54:"s_mod",55:"s_greather",56:"s_less",57:"s_greather_equal",58:"s_less_equal",59:"s_equal",60:"s_not_equal",61:"s_or",62:"s_and",63:"s_not",64:"s_increment",65:"s_decrement",68:"s_cor_open",69:"s_cor_close",70:"s_dot",71:"nulo",72:"boolean",73:"number",74:"string"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[7,2],[16,1],[16,1],[16,1],[16,1],[16,1],[22,3],[22,1],[8,6],[8,4],[8,4],[8,2],[8,6],[8,4],[8,4],[8,2],[8,6],[8,4],[10,3],[10,3],[30,12],[30,11],[30,8],[30,7],[36,2],[36,1],[38,8],[13,1],[14,1],[15,2],[15,1],[42,3],[42,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,3],[27,1],[27,1],[43,3],[43,3],[43,3],[43,3],[43,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[45,3],[45,3],[45,2],[46,2],[47,2],[48,2],[12,2],[66,2],[66,1],[67,3],[67,2],[67,2],[11,4],[11,3],[49,1],[49,1],[49,1],[49,1],[49,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:

          this.$ = $$[$0];
      
break;
case 3:
 
        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
      
break;
case 4:
this.$ = [$$[$0]];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 50:
this.$ = $$[$0-1];
break;
case 12:
this.$ = {etiqueta: 'tipo', tipo: 0, valor: $$[$0]};
break;
case 13:
this.$ = {etiqueta: 'tipo', tipo: 1, valor: $$[$0]};
break;
case 14:
this.$ = {etiqueta: 'tipo', tipo: 2, valor: $$[$0]};
break;
case 15:
this.$ = {etiqueta: 'tipo', tipo: 3, valor: $$[$0]};
break;
case 16:

        if($$[$0].toLowerCase() == "String")
        {
          this.$ = {etiqueta: 'tipo', tipo: 4, valor: $$[$0]};
        }
        else
        {
          this.$ = {etiqueta: 'tipo', tipo: 5, valor: $$[$0]};
        }
      
break;
case 17:
 
        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
      
break;
case 18:
 this.$ = [$$[$0]];
break;
case 19: case 23:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-4], tipo: $$[$0-2], valor: $$[$0]};
      
break;
case 20:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: $$[$0], valor: null};      
      
break;
case 21:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: null, valor: $$[$0]};
      
break;
case 22: case 26:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0], tipo: null, valor: null};
      
break;
case 24:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: $$[$0], valor: null};
      
break;
case 25:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: null, valor: $$[$0]};
        this.$.setValor($$[$0]);
      
break;
case 27:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: true, identificador: $$[$0-4], tipo: $$[$0-2], valor: $$[$0]};      
      
break;
case 28:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: true, identificador: $$[$0-2], tipo: null, valor: $$[$0]};      
      
break;
case 29:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_asignacion', linea: linea, columna: columna, tipo: 0, acceso0: $$[$0-2], acceso1: null, valor: $$[$0]}; 
    
break;
case 30:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_asignacion', linea: linea, columna: columna, tipo: 1, acceso0: null, acceso1: $$[$0-2], valor: $$[$0]};
    
break;
case 31:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-9], sentencias1: $$[$0-6], lista_else_if: $$[$0-4], sentencias2: $$[$0-1]};
      
break;
case 32:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-8], sentencias1: $$[$0-5], lista_else_if: null, sentencias2: $$[$0-1]};
      
break;
case 33:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-5], sentencias1: $$[$0-2], lista_else_if: $$[$0], sentencias2: null};
      
break;
case 34:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-4], sentencias1: $$[$0-1], lista_else_if: null, sentencias2: null};      
      
break;
case 35:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
      
break;
case 36: case 43:

        this.$ = [$$[$0]];
      
break;
case 37:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-4], sentencias1: $$[$0-1], lista_else_if: null, sentencias2: null};
      
break;
case 38:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_break', linea: linea, columna: columna};
      
break;
case 39:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_continue', linea: linea, columna: columna};
      
break;
case 40:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_return', linea: linea, valor: $$[$0]};
      
break;
case 41:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_return', linea: linea, valor: null};
      
break;
case 42:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
      
break;
case 44: case 45: case 46: case 47: case 48: case 49: case 51: case 52:
this.$ = $$[$0];
break;
case 53:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'suma', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 54:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'resta', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 55:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'multiplicacion', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 56:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'division', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 57:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'modulo', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 58:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'mayor_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 59:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'menor_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 60:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'mayor_igual_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 61:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'menor_igual_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 62:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'igual_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 63:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'diferente_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 64:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'or', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 65:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'and', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 66:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'not', linea: linea, columna: columna, expresion1: $$[$0]};
      
break;
case 67:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'operador_urinario', linea: linea, columna: columna, expresion1: $$[$0]};
      
break;
case 68:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'operador_incremento', linea: linea, columna: columna, expresion1: $$[$0-1]};
      
break;
case 69:

        var linea = yylineno;
        var columna = yyleng; 
        this.$ = {etiqueta: 'operador_decremento', linea: linea, columna: columna, expresion: $$[$0-1]};
      
break;
case 70:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_acceso', linea: linea, columna: columna, identificador: $$[$0-1], lista_acceso: $$[$0]};
    
break;
case 71:

      $$[$0-1].push($$[$0]);
      this.$ = $$[$0-1];
    
break;
case 72:

      this.$ = [$$[$0]];
    
break;
case 73:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'tipo_acceso', linea: linea, columna: columna, tipo: 0, acceso0: $$[$0-1], acceso1: null, acceso2: null};
    
break;
case 74:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'tipo_acceso', linea: linea, columna: columna, tipo: 2, acceso0: null, acceso1: null, acceso2: $$[$0]};
    
break;
case 75:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'tipo_acceso', linea: linea, columna: columna, tipo: 1, acceso0: null, acceso1: $$[$0], acceso2: null};
    
break;
case 76:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_llamada', linea: linea, columna: columna, identificador: $$[$0-3], parametros: $$[$0-1]};
    
break;
case 77:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_llamada', linea: linea, columna: columna, identificador: $$[$0-2], parametros: []};
    
break;
case 78:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 1, valor: $$[$0]}, valor: yytext}; 
      
break;
case 79:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 2, valor: $$[$0]}, valor: yytext}; 
      
break;
case 80:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 3, valor: $$[$0]}, valor: yytext};
      
break;
case 81:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 4, valor: $$[$0]}, valor:  yytext};
      
break;
case 82:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 5, valor: $$[$0]}, valor: yytext};
      
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,21:$V0,24:$V1,28:$V2,29:$V3,39:$V4,40:$V5,41:$V6},{1:[3]},{5:[1,19]},{5:[2,2],7:20,8:5,10:6,11:7,12:8,13:9,14:10,15:11,21:$V0,24:$V1,28:$V2,29:$V3,39:$V4,40:$V5,41:$V6},o($V7,[2,4]),{9:[1,21]},{9:[1,22]},{9:[1,23]},{9:[1,24],26:[1,25]},{9:[1,26]},{9:[1,27]},{9:[1,28]},{21:$V8,22:29},{21:$V8,22:31},{21:$V8,22:32},{26:[1,33],32:$V9,66:35,67:36,68:$Va,70:$Vb},{9:[2,38]},{9:[2,39]},{9:[2,41],12:47,21:$Vc,27:39,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{1:[2,1]},o($V7,[2,3]),o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),{12:47,21:$Vc,27:56,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),{9:[2,22],23:$Vk,25:[1,57],26:[1,58]},o($Vl,[2,18]),{9:[2,26],23:$Vk,25:[1,60],26:[1,61]},{23:$Vk,25:[1,62],26:[1,63]},{12:47,21:$Vc,27:64,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:67,32:$Vd,33:[1,66],42:65,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},o([9,23,26,33,50,51,52,53,54,55,56,57,58,59,60,61,62,69],[2,70],{67:68,68:$Va,70:$Vb}),o($Vm,[2,72]),{12:47,21:$Vc,27:69,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{11:70,21:[1,71]},{9:[2,40],50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz},o($VA,[2,44]),o($VA,[2,45]),o($VA,[2,46]),o($VA,[2,47]),o($VA,[2,48]),o($VA,[2,49]),{12:47,21:$Vc,27:85,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},o($VA,[2,51]),o($VA,[2,52]),{12:47,21:$Vc,27:86,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:87,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},o($VA,[2,82],{66:35,67:36,64:[1,88],65:[1,89],68:$Va,70:$Vb}),o($VA,[2,78]),o($VA,[2,79]),o($VA,[2,80]),o($VA,[2,81]),{9:[2,30],50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz},{16:90,17:$VB,18:$VC,19:$VD,20:$VE,21:$VF},{12:47,21:$Vc,27:96,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{21:[1,97]},{16:98,17:$VB,18:$VC,19:$VD,20:$VE,21:$VF},{12:47,21:$Vc,27:99,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{16:100,17:$VB,18:$VC,19:$VD,20:$VE,21:$VF},{12:47,21:$Vc,27:101,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{9:[2,29],50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz},{23:[1,103],33:[1,102]},o($Vm,[2,77]),o($VG,[2,43],{50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz}),o($Vm,[2,71]),{50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,69:[1,104]},o($Vm,[2,74]),o($Vm,[2,75],{32:$V9}),{12:47,21:$Vc,27:105,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:106,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:107,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:108,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:109,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:110,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:111,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:112,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:113,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:114,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:115,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:116,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:117,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{33:[1,118],50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz},o($VA,[2,66]),o($VA,[2,67]),o($VA,[2,68]),o($VA,[2,69]),{9:[2,20],26:[1,119]},o($VH,[2,12]),o($VH,[2,13]),o($VH,[2,14]),o($VH,[2,15]),o($VH,[2,16]),{9:[2,21],50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz},o($Vl,[2,17]),{9:[2,24],26:[1,120]},{9:[2,25],50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz},{26:[1,121]},{9:[2,28],50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz},o($Vm,[2,76]),{12:47,21:$Vc,27:122,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},o($Vm,[2,73]),o($VI,[2,53],{52:$Vp,53:$Vq,54:$Vr}),o($VI,[2,54],{52:$Vp,53:$Vq,54:$Vr}),o($VA,[2,55]),o($VA,[2,56]),o($VA,[2,57]),o($VJ,[2,58],{50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr}),o($VJ,[2,59],{50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr}),o($VJ,[2,60],{50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr}),o($VJ,[2,61],{50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr}),o($VK,[2,62],{50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o($VK,[2,63],{50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv}),o([9,23,33,61,69],[2,64],{50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,62:$Vz}),o([9,23,33,61,62,69],[2,65],{50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx}),o($VA,[2,50]),{12:47,21:$Vc,27:123,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:124,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},{12:47,21:$Vc,27:125,32:$Vd,43:40,44:41,45:42,46:43,47:44,48:45,49:48,51:$Ve,63:$Vf,71:$Vg,72:$Vh,73:$Vi,74:$Vj},o($VG,[2,42],{50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz}),{9:[2,19],50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz},{9:[2,23],50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz},{9:[2,27],50:$Vn,51:$Vo,52:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz}],
defaultActions: {16:[2,38],17:[2,39],19:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 'r_import'
break;
case 2:return 17
break;
case 3:return 19
break;
case 4:return 20
break;
case 5:return 'r_string'
break;
case 6:return 'r_public'
break;
case 7:return 'r_private'
break;
case 8:return 24
break;
case 9:return 28
break;
case 10:return 29
break;
case 11:return 'r_function'
break;
case 12:return 31
break;
case 13:return 37
break;
case 14:return 'r_switch'
break;
case 15:return 'r_case'
break;
case 16:return 'r_default'
break;
case 17:return 'r_do'
break;
case 18:return 'r_while'
break;
case 19:return 'r_for'
break;
case 20:return 31
break;
case 21:return 'r_of'
break;
case 22:return 40
break;
case 23:return 39
break;
case 24:return 41
break;
case 25:return 72
break;
case 26:return 72
break;
case 27:return 73
break;
case 28:return 74
break;
case 29:return 74
break;
case 30:return 71
break;
case 31:return 59
break;
case 32:return 26
break;
case 33:return 64
break;
case 34:return 65
break;
case 35:return 50
break;
case 36:return 51
break;
case 37:return 52
break;
case 38:return 53 
break;
case 39:return 54
break;
case 40:return 60
break;
case 41:return 58
break;
case 42:return 57
break;
case 43:return 56
break;
case 44:return 55
break;
case 45:return 61
break;
case 46:return 62
break;
case 47:return 63
break;
case 48:return 32
break;
case 49:return 33
break;
case 50:return 's_ternario'
break;
case 51:return 34
break;
case 52:return 35
break;
case 53:return 68
break;
case 54:return 69
break;
case 55:return 70
break;
case 56:return 23
break;
case 57:return 25
break;
case 58:return 9
break;
case 59:return 21
break;
case 60:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:import\b)/,/^(?:void\b)/,/^(?:boolean\b)/,/^(?:number\b)/,/^(?:String\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:'[^"'"]*')/,/^(?:"[^"\""]*")/,/^(?:null\b)/,/^(?:==)/,/^(?:=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:([a-zA-ZñÑ]|(_[a-zA-ZñÑ]))([a-zA-ZñÑ]|_|[0-9])*)/,/^(?:$)/],
conditions: {"estado_cadena":{"rules":[],"inclusive":false},"estado_caracter":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar_MatrioshTS;
exports.Parser = Grammar_MatrioshTS.Parser;
exports.parse = function () { return Grammar_MatrioshTS.parse.apply(Grammar_MatrioshTS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}