/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar_MatrioshTS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,21],$V2=[1,22],$V3=[1,23],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[1,31],$Vb=[1,32],$Vc=[1,6],$Vd=[1,7],$Ve=[5,29,32,36,37,38,46,52,53,54,60,61,62,63,66],$Vf=[5,29,32,36,37,38,42,46,50,51,52,53,54,60,61,62,63,66],$Vg=[1,43],$Vh=[1,48],$Vi=[1,51],$Vj=[1,52],$Vk=[1,55],$Vl=[1,56],$Vm=[1,75],$Vn=[1,70],$Vo=[1,74],$Vp=[1,73],$Vq=[1,76],$Vr=[1,77],$Vs=[1,78],$Vt=[1,79],$Vu=[1,85],$Vv=[11,31,33,34],$Vw=[11,31,33,34,40,78,79,80,81,82,83,84,85,86,87,88,89,90,94,97,98,99],$Vx=[1,108],$Vy=[1,109],$Vz=[1,110],$VA=[1,111],$VB=[1,112],$VC=[1,113],$VD=[1,114],$VE=[1,115],$VF=[1,116],$VG=[1,117],$VH=[1,118],$VI=[1,119],$VJ=[1,120],$VK=[1,121],$VL=[11,31,33,40,78,79,80,81,82,83,84,85,86,87,88,89,90,94,98],$VM=[1,131],$VN=[1,133],$VO=[1,134],$VP=[1,135],$VQ=[1,136],$VR=[1,137],$VS=[31,40],$VT=[29,32,36,37,38,42,46,50,51,52,53,54,60,61,62],$VU=[1,173],$VV=[11,31,34,40,41,42],$VW=[11,31,33,40,78,79,83,84,85,86,87,88,89,90,94,98],$VX=[11,31,33,40,83,84,85,86,87,88,89,90,94,98],$VY=[11,31,33,40,87,88,89,90,94,98],$VZ=[31,42],$V_=[1,207],$V$=[42,50,51],$V01=[1,253],$V11=[5,29,32,36,37,38,42,44,46,50,51,52,53,54,60,61,62,63,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"BODY_MATRIOSHTS":3,"LISTA_CONTENIDO":4,"EOF":5,"TYPES":6,"FUNCION":7,"SENTENCIA":8,"LISTA_SENTENCIAS":9,"SENTENCIA_DECLARACION":10,"s_dot_coma":11,"SENTENCIA_ASIGNACION":12,"SENTENCIA_IF":13,"SENTENCIA_SWITCH":14,"SENTENCIA_WHILE":15,"SENTENCIA_DO_WHILE":16,"SENTENCIA_FOR":17,"SENTENCIA_FOR_LIST":18,"SENTENCIA_LLAMADA":19,"SENTENCIA_ACCESO":20,"SENTENCIA_BREAK":21,"SENTENCIA_CONTINUE":22,"SENTENCIA_RETURN":23,"TIPO":24,"r_void":25,"r_nulo":26,"r_boolean":27,"r_number":28,"identificador":29,"LISTA_IDENTIFICADORES":30,"s_coma":31,"r_var":32,"s_doble_dot":33,"s_asign":34,"EXPRESION":35,"r_let":36,"r_const":37,"r_if":38,"s_par_open":39,"s_par_close":40,"s_key_open":41,"s_key_close":42,"LISTA_ELSE_IF":43,"r_else":44,"SENTENCIA_ELSE_IF":45,"r_switch":46,"LISTA_CASOS":47,"DEFECTO":48,"CASO":49,"r_case":50,"r_default":51,"r_while":52,"r_do":53,"r_for":54,"let":55,"r_in":56,"identidicador":57,"identificdor":58,"r_of":59,"r_break":60,"r_continue":61,"r_return":62,"r_type":63,"LISTA_ATRIBUTOS":64,"ATRIBUTO":65,"r_function":66,"LISTA_PARAMETROS":67,"DECLARACION_PARAMETRO":68,"LISTA_EXPRESIONES":69,"EXPRESION_ARITMETICA":70,"EXPRESION_RELACIONAL":71,"EXPRESION_LOGICA":72,"OPERADOR_UNARIO":73,"OPERADOR_INCREMENTO":74,"OPERADOR_DECREMENTO":75,"OPERADOR_TERNARIO":76,"DATO_PRIMITIVO":77,"s_plus":78,"s_minus":79,"s_mul":80,"s_div":81,"s_mod":82,"s_greather":83,"s_less":84,"s_greather_equal":85,"s_less_equal":86,"s_equal":87,"s_not_equal":88,"s_or":89,"s_and":90,"s_not":91,"s_increment":92,"s_decrement":93,"s_ternario":94,"LISTA_ACCESOS":95,"ACCESO":96,"s_cor_open":97,"s_cor_close":98,"s_dot":99,"nulo":100,"boolean":101,"number":102,"string":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"s_dot_coma",25:"r_void",26:"r_nulo",27:"r_boolean",28:"r_number",29:"identificador",31:"s_coma",32:"r_var",33:"s_doble_dot",34:"s_asign",36:"r_let",37:"r_const",38:"r_if",39:"s_par_open",40:"s_par_close",41:"s_key_open",42:"s_key_close",44:"r_else",46:"r_switch",50:"r_case",51:"r_default",52:"r_while",53:"r_do",54:"r_for",55:"let",56:"r_in",57:"identidicador",58:"identificdor",59:"r_of",60:"r_break",61:"r_continue",62:"r_return",63:"r_type",66:"r_function",78:"s_plus",79:"s_minus",80:"s_mul",81:"s_div",82:"s_mod",83:"s_greather",84:"s_less",85:"s_greather_equal",86:"s_less_equal",87:"s_equal",88:"s_not_equal",89:"s_or",90:"s_and",91:"s_not",92:"s_increment",93:"s_decrement",94:"s_ternario",97:"s_cor_open",98:"s_cor_close",99:"s_dot",100:"nulo",101:"boolean",102:"number",103:"string"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[9,2],[9,1],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[8,2],[8,2],[8,2],[8,2],[24,1],[24,1],[24,1],[24,1],[24,1],[30,3],[30,1],[10,6],[10,4],[10,4],[10,2],[10,6],[10,4],[10,4],[10,2],[10,6],[10,4],[12,3],[12,3],[13,12],[13,11],[13,8],[13,7],[43,2],[43,1],[45,8],[14,8],[14,7],[47,2],[47,1],[49,4],[48,3],[15,7],[16,8],[17,11],[17,11],[18,10],[18,10],[21,1],[22,1],[23,2],[23,1],[6,7],[64,3],[64,1],[65,3],[7,10],[7,9],[7,8],[7,7],[67,3],[67,1],[68,3],[69,3],[69,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,3],[35,1],[35,1],[70,3],[70,3],[70,3],[70,3],[70,3],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[72,3],[72,3],[72,2],[73,2],[74,2],[75,2],[76,5],[20,2],[95,2],[95,1],[96,3],[96,2],[96,2],[19,4],[19,3],[77,1],[77,1],[77,1],[77,1],[77,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 3: case 4: case 8: case 46: case 51:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
      
break;
case 5: case 6: case 7: case 9: case 47: case 52: case 74: case 77:

        this.$ = [$$[$0]];
      
break;
case 10: case 11: case 18: case 19: case 20: case 21: case 22: case 85:
this.$ = $$[$0-1];
break;
case 12: case 13: case 14: case 15: case 16: case 17: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 86: case 87:
this.$ = $$[$0];
break;
case 23:
this.$ = {etiqueta: 'tipo', tipo: 0, valor: $$[$0]};
break;
case 24:
this.$ = {etiqueta: 'tipo', tipo: 1, valor: $$[$0]};
break;
case 25:
this.$ = {etiqueta: 'tipo', tipo: 2, valor: $$[$0]};
break;
case 26:
this.$ = {etiqueta: 'tipo', tipo: 3, valor: $$[$0]};
break;
case 27:

        if($$[$0].toLowerCase() == "String")
        {
          this.$ = {etiqueta: 'tipo', tipo: 4, valor: $$[$0]};
        }
        else
        {
          this.$ = {etiqueta: 'tipo', tipo: 5, valor: $$[$0]};
        }
      
break;
case 28:
 
        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
      
break;
case 29:
 this.$ = [$$[$0]];
break;
case 30: case 34:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-4], tipo: $$[$0-2], valor: $$[$0]};
      
break;
case 31:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: $$[$0], valor: null};      
      
break;
case 32: case 36:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: null, valor: $$[$0]};
      
break;
case 33: case 37:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0], tipo: null, valor: null};
      
break;
case 35:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: $$[$0], valor: null};
      
break;
case 38:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: true, identificador: $$[$0-4], tipo: $$[$0-2], valor: $$[$0]};      
      
break;
case 39:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: true, identificador: $$[$0-2], tipo: null, valor: $$[$0]};      
      
break;
case 40:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_asignacion', linea: linea, columna: columna, tipo: 0, acceso0: $$[$0-2], acceso1: null, valor: $$[$0]}; 
    
break;
case 41:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_asignacion', linea: linea, columna: columna, tipo: 1, acceso0: null, acceso1: $$[$0-2], valor: $$[$0]};
    
break;
case 42:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-9], sentencias1: $$[$0-6], lista_else_if: $$[$0-4], sentencias2: $$[$0-1]};
      
break;
case 43:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-8], sentencias1: $$[$0-5], lista_else_if: null, sentencias2: $$[$0-1]};
      
break;
case 44:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-5], sentencias1: $$[$0-2], lista_else_if: $$[$0], sentencias2: null};
      
break;
case 45:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-4], sentencias1: $$[$0-1], lista_else_if: null, sentencias2: null};      
      
break;
case 48:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion: $$[$0-4], sentencias1: $$[$0-1], lista_else_if: null, sentencias2: null};
      
break;
case 49:

        var linea = yylineno;
        var columna = yyleng;
        $$[$0-2].push($$[$0-1]);
        this.$ = {etiqueta: 'sentencia_switch', linea: linea, columna: columna, condicion: $$[$0-5], lista_casos: $$[$0-2]};
      
break;
case 50:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_switch', linea: linea, columna: columna, condicion: $$[$0-4], lista_casos: $$[$0-1]};
      
break;
case 53:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_caso', linea: linea, columna: columna, default: false, condicion : $$[$0-2], lista_sentencias: $$[$0]};
      
break;
case 54:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_caso', linea: linea, columna: columna, default: true, condicion : null, lista_sentencias: $$[$0]};
      
break;
case 55:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_while', linea: linea, columna: columna, condicion: $$[$0-4], sentencias: $$[$0-1]};
      
break;
case 56:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_do_while', linea: linea, columna: columna, condicion: $$[$0-1], sentencias: $$[$0-5]};
      
break;
case 57:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_for', linea: linea, columna: columna, sentencia1: $$[$0-8], sentencia2: $$[$0-6], sentencia3: $$[$0-4], lista_sentencias: $$[$0-1]};   
      
break;
case 58:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_for', linea: linea, columna: columna, sentencia1: $$[$0-8], sentencia2: $$[$0-6], sentencia3: $$[$0-4], lista_sentencias: $$[$0-1]};
      
break;
case 59:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_for_list', linea: linea, columna: columna, id1: $$[$0-6], id2: $$[$0-4], lista_sentencias: $$[$0-1]};   
      
break;
case 60:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_for_list', linea: linea, columna: columna, id1: $$[$0-7], id2: $$[$0-5], lista_sentencias: $$[$0-1]};
      
break;
case 61:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_break', linea: linea, columna: columna};
      
break;
case 62:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_continue', linea: linea, columna: columna};
      
break;
case 63:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_return', linea: linea, valor: $$[$0]};
      
break;
case 64:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_return', linea: linea, valor: null};
      
break;
case 65:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'type', linea: linea, columna: columna, identificador: $$[$0-5], lista_atributos: $$[$0-2]};
    
break;
case 66:

      $$[$0-2].push($$[$0-1]);
      this.$ = $$[$0-2];
    
break;
case 67: case 108:

      this.$ = [$$[$0]];
    
break;
case 68:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'atributo', linea: linea, columna: columna, valor: $$[$0-2], tipo: $$[$0]};
    
break;
case 69:

        var linea = yylineno;
        var columna = yyleng;

        this.$ = {etiqueta: 'funcion', linea: linea, columna: columna, identificador: $$[$0-8], tipo: $$[$0-3], lista_parametros: $$[$0-6], lista_sentencias: $$[$0-1]};   
      
break;
case 70:

        var linea = yylineno;
        var columna = yyleng;

        this.$ = {etiqueta: 'funcion', linea: linea, columna: columna, identificador: $$[$0-7], tipo: $$[$0-3], lista_parametros: null, lista_sentencias: $$[$0-1]};
      
break;
case 71:

        var linea = yylineno;
        var columna = yyleng;

        this.$ = {etiqueta: 'funcion', linea: linea, columna: columna, identificador: $$[$0-6], tipo: null, lista_parametros: $$[$0-4], lista_sentencias: $$[$0-1]};       
      
break;
case 72:

        var linea = yylineno;
        var columna = yyleng;

        this.$ = {etiqueta: 'funcion', linea: linea, columna: columna, identificador: $$[$0-5], tipo: null, lista_parametros: null, lista_sentencias: $$[$0-1]};
      
break;
case 73: case 76:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
      
break;
case 75:

        var linea = yylineno;
        var columna = yyleng;

        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: $$[$0], valor: null};
      
break;
case 88:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'suma', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 89:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'resta', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 90:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'multiplicacion', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 91:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'division', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 92:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'modulo', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 93:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'mayor_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 94:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'menor_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 95:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'mayor_igual_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 96:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'menor_igual_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 97:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'igual_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 98:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'diferente_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 99:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'or', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 100:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'and', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 101:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'not', linea: linea, columna: columna, expresion1: $$[$0]};
      
break;
case 102:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'operador_urinario', linea: linea, columna: columna, expresion1: $$[$0]};
      
break;
case 103:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'operador_incremento', linea: linea, columna: columna, expresion1: {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 5, valor: $$[$0-1]}, valor: $$[$0-1]}};
      
break;
case 104:

        var linea = yylineno;
        var columna = yyleng; 
        this.$ = {etiqueta: 'operador_decremento', linea: linea, columna: columna, expresion1: {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 5, valor: $$[$0-1]}, valor: $$[$0-1]}};
      
break;
case 105:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: "operador_ternario", linea: linea, columna: columna, condicion: $$[$0-4] , expresion1: $$[$0-2], expresion2: $$[$0]};
    
break;
case 106:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_acceso', linea: linea, columna: columna, identificador: $$[$0-1], lista_acceso: $$[$0]};
    
break;
case 107:

      $$[$0-1].push($$[$0]);
      this.$ = $$[$0-1];
    
break;
case 109:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'tipo_acceso', linea: linea, columna: columna, tipo: 0, acceso0: $$[$0-1], acceso1: null, acceso2: null};
    
break;
case 110:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'tipo_acceso', linea: linea, columna: columna, tipo: 2, acceso0: null, acceso1: null, acceso2: $$[$0]};
    
break;
case 111:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'tipo_acceso', linea: linea, columna: columna, tipo: 1, acceso0: null, acceso1: $$[$0], acceso2: null};
    
break;
case 112:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_llamada', linea: linea, columna: columna, identificador: $$[$0-3], parametros: $$[$0-1]};
    
break;
case 113:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_llamada', linea: linea, columna: columna, identificador: $$[$0-2], parametros: []};
    
break;
case 114:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 1, valor: $$[$0]}, valor: yytext}; 
      
break;
case 115:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 2, valor: $$[$0]}, valor: yytext}; 
      
break;
case 116:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 3, valor: $$[$0]}, valor: yytext};
      
break;
case 117:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 4, valor: $$[$0]}, valor:  yytext};
      
break;
case 118:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 5, valor: $$[$0]}, valor: yytext};
      
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,66:$Vd},{1:[3]},{5:[1,33],6:34,7:35,8:36,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,66:$Vd},o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),{29:[1,37]},{29:[1,38]},{11:[1,39]},{11:[1,40]},o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),{11:[1,41]},{11:[1,42],34:$Vg},{11:[1,44]},{11:[1,45]},{11:[1,46]},{29:$Vh,30:47},{29:$Vh,30:49},{29:$Vh,30:50},{34:$Vi,39:$Vj,95:53,96:54,97:$Vk,99:$Vl},{39:[1,57]},{39:[1,58]},{39:[1,59]},{41:[1,60]},{39:[1,61]},{11:[2,61]},{11:[2,62]},{11:[2,64],20:71,29:$Vm,35:62,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,3]),o($Ve,[2,4]),{34:[1,80]},{39:[1,81]},o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,18]),o($Vf,[2,19]),{20:71,29:$Vm,35:82,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},o($Vf,[2,20]),o($Vf,[2,21]),o($Vf,[2,22]),{11:[2,33],31:$Vu,33:[1,83],34:[1,84]},o($Vv,[2,29]),{11:[2,37],31:$Vu,33:[1,86],34:[1,87]},{31:$Vu,33:[1,88],34:[1,89]},{20:71,29:$Vm,35:90,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:93,39:$Vn,40:[1,92],69:91,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},o([11,31,33,34,40,78,79,80,81,82,83,84,85,86,87,88,89,90,94,98],[2,106],{96:94,97:$Vk,99:$Vl}),o($Vw,[2,108]),{20:71,29:$Vm,35:95,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{19:96,29:[1,97]},{20:71,29:$Vm,35:98,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:99,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:100,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{8:102,9:101,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{10:103,12:104,20:107,29:[1,106],32:$V1,36:$V2,37:$V3,55:[1,105]},{11:[2,63],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},o($VL,[2,78]),o($VL,[2,79]),o($VL,[2,80]),o($VL,[2,81]),o($VL,[2,82]),o($VL,[2,83]),o($VL,[2,84]),{20:71,29:$Vm,35:122,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},o($VL,[2,86]),o($VL,[2,87]),{20:71,29:$Vm,35:123,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:124,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},o($VL,[2,118],{95:53,96:54,92:[1,125],93:[1,126],97:$Vk,99:$Vl}),o($VL,[2,114]),o($VL,[2,115]),o($VL,[2,116]),o($VL,[2,117]),{41:[1,127]},{29:$VM,40:[1,129],67:128,68:130},{11:[2,41],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{24:132,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR},{20:71,29:$Vm,35:138,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{29:[1,139]},{24:140,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR},{20:71,29:$Vm,35:141,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{24:142,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR},{20:71,29:$Vm,35:143,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{11:[2,40],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{31:[1,145],40:[1,144]},o($Vw,[2,113]),o($VS,[2,77],{78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK}),o($Vw,[2,107]),{78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK,98:[1,146]},o($Vw,[2,110]),o($Vw,[2,111],{39:$Vj}),{40:[1,147],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{40:[1,148],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{40:[1,149],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,150],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},o($VT,[2,9]),{11:[1,152]},{11:[1,153]},{29:[1,154],58:[1,155]},{34:$Vi,95:53,96:54,97:$Vk,99:$Vl},{34:$Vg},{20:71,29:$Vm,35:156,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:157,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:158,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:159,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:160,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:161,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:162,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:163,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:164,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:165,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:166,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:167,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:168,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:169,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{40:[1,170],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},o($VL,[2,101]),o($VL,[2,102]),o($VL,[2,103]),o($VL,[2,104]),{29:$VU,64:171,65:172},{31:[1,175],40:[1,174]},{33:[1,176],41:[1,177]},o($VS,[2,74]),{33:[1,178]},{11:[2,31],34:[1,179]},o($VV,[2,23]),o($VV,[2,24]),o($VV,[2,25]),o($VV,[2,26]),o($VV,[2,27]),{11:[2,32],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},o($Vv,[2,28]),{11:[2,35],34:[1,180]},{11:[2,36],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{34:[1,181]},{11:[2,39],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},o($Vw,[2,112]),{20:71,29:$Vm,35:182,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},o($Vw,[2,109]),{41:[1,183]},{41:[1,184]},{41:[1,185]},{52:[1,186]},o($VT,[2,8]),{20:71,29:$Vm,35:187,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:188,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{56:[1,189]},{59:[1,190]},o($VW,[2,88],{80:$Vz,81:$VA,82:$VB}),o($VW,[2,89],{80:$Vz,81:$VA,82:$VB}),o($VL,[2,90]),o($VL,[2,91]),o($VL,[2,92]),o($VX,[2,93],{78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB}),o($VX,[2,94],{78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB}),o($VX,[2,95],{78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB}),o($VX,[2,96],{78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB}),o($VY,[2,97],{78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF}),o($VY,[2,98],{78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF}),o([11,31,33,40,89,94,98],[2,99],{78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,90:$VJ}),o([11,31,33,40,89,90,94,98],[2,100],{78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH}),{33:[1,191],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},o($VL,[2,85]),{31:[1,193],42:[1,192]},o($VZ,[2,67]),{33:[1,194]},{33:[1,195],41:[1,196]},{29:$VM,68:197},{24:198,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR},{8:102,9:199,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{24:200,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR},{20:71,29:$Vm,35:201,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:202,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:203,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},o($VS,[2,76],{78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK}),{8:102,9:204,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{47:205,49:206,50:$V_},{8:102,9:208,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{39:[1,209]},{11:[1,210],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{11:[1,211],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{57:[1,212]},{29:[1,213]},{20:71,29:$Vm,35:214,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{11:[1,215]},{29:$VU,65:216},{24:217,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR},{24:218,25:$VN,26:$VO,27:$VP,28:$VQ,29:$VR},{8:102,9:219,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},o($VS,[2,73]),{41:[1,220]},{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,221],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},o($VS,[2,75]),{11:[2,30],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{11:[2,34],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{11:[2,38],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,222],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{42:[1,224],48:223,49:225,50:$V_,51:[1,226]},o($V$,[2,52]),{20:71,29:$Vm,35:227,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,228],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{20:71,29:$Vm,35:229,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:230,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{20:71,29:$Vm,35:231,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{40:[1,232]},{40:[1,233]},o([11,31,33,40,98],[2,105],{78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK}),o($Ve,[2,65]),o($VZ,[2,66]),o($VZ,[2,68]),{41:[1,234]},{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,235],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{8:102,9:236,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},o($Ve,[2,72]),o($Vf,[2,45],{43:237,45:239,44:[1,238]}),{42:[1,240]},o($Vf,[2,50]),o($V$,[2,51]),{33:[1,241]},{33:[1,242],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},o($Vf,[2,55]),{40:[1,243],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{40:[1,244],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{40:[1,245],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},{41:[1,246]},{41:[1,247]},{8:102,9:248,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},o($Ve,[2,71]),{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,249],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},o($Vf,[2,44],{45:251,44:[1,250]}),{38:$V01,41:[1,252]},o($V11,[2,47]),o($Vf,[2,49]),{8:102,9:254,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{8:102,9:255,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},o($Vf,[2,56]),{41:[1,256]},{41:[1,257]},{8:102,9:258,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{8:102,9:259,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,260],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},o($Ve,[2,70]),{38:$V01,41:[1,261]},o($V11,[2,46]),{8:102,9:262,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{39:[1,263]},{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[2,54],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},o($V$,[2,53],{10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,8:151,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb}),{8:102,9:264,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{8:102,9:265,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,266],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,267],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},o($Ve,[2,69]),{8:102,9:268,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,269],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{20:71,29:$Vm,35:270,39:$Vn,70:63,71:64,72:65,73:66,74:67,75:68,76:69,77:72,79:$Vo,91:$Vp,100:$Vq,101:$Vr,102:$Vs,103:$Vt},{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,271],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,272],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},o($Vf,[2,59]),o($Vf,[2,60]),{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,273],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},o($Vf,[2,43]),{40:[1,274],78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,94:$VK},o($Vf,[2,57]),o($Vf,[2,58]),o($Vf,[2,42]),{41:[1,275]},{8:102,9:276,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},{8:151,10:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,29:$V0,32:$V1,36:$V2,37:$V3,38:$V4,42:[1,277],46:$V5,52:$V6,53:$V7,54:$V8,60:$V9,61:$Va,62:$Vb},o($V11,[2,48])],
defaultActions: {30:[2,61],31:[2,62],33:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 'r_import'
break;
case 2:return 25
break;
case 3:return 27
break;
case 4:return 28
break;
case 5:return 'r_string'
break;
case 6:return 'r_public'
break;
case 7:return 'r_private'
break;
case 8:return 32
break;
case 9:return 36
break;
case 10:return 37
break;
case 11:return 63
break;
case 12:return 66
break;
case 13:return 38
break;
case 14:return 44
break;
case 15:return 46
break;
case 16:return 50
break;
case 17:return 51
break;
case 18:return 53
break;
case 19:return 52
break;
case 20:return 54
break;
case 21:return 56
break;
case 22:return 59
break;
case 23:return 61
break;
case 24:return 60
break;
case 25:return 62
break;
case 26:return 101
break;
case 27:return 101
break;
case 28:return 102
break;
case 29:return 103
break;
case 30:return 103
break;
case 31:return 100
break;
case 32:return 87
break;
case 33:return 34
break;
case 34:return 92
break;
case 35:return 93
break;
case 36:return 78
break;
case 37:return 79
break;
case 38:return 80
break;
case 39:return 81 
break;
case 40:return 82
break;
case 41:return 88
break;
case 42:return 86
break;
case 43:return 85
break;
case 44:return 84
break;
case 45:return 83
break;
case 46:return 89
break;
case 47:return 90
break;
case 48:return 91
break;
case 49:return 39
break;
case 50:return 40
break;
case 51:return 94
break;
case 52:return 41
break;
case 53:return 42
break;
case 54:return 97
break;
case 55:return 98
break;
case 56:return 99
break;
case 57:return 31
break;
case 58:return 33
break;
case 59:return 11
break;
case 60:return 29
break;
case 61:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:import\b)/,/^(?:void\b)/,/^(?:boolean\b)/,/^(?:number\b)/,/^(?:String\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:type\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:'[^"'"]*')/,/^(?:"[^"\""]*")/,/^(?:null\b)/,/^(?:==)/,/^(?:=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:([a-zA-ZñÑ]|(_[a-zA-ZñÑ]))([a-zA-ZñÑ]|_|[0-9])*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar_MatrioshTS;
exports.Parser = Grammar_MatrioshTS.Parser;
exports.parse = function () { return Grammar_MatrioshTS.parse.apply(Grammar_MatrioshTS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}