/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar_MatrioshTS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,19],$V2=[1,20],$V3=[1,21],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,5],$Vd=[5,27,30,34,35,36,45,51,52,53,59,60,61,62],$Ve=[1,39],$Vf=[1,44],$Vg=[1,47],$Vh=[1,48],$Vi=[1,51],$Vj=[1,52],$Vk=[1,71],$Vl=[1,66],$Vm=[1,70],$Vn=[1,69],$Vo=[1,72],$Vp=[1,73],$Vq=[1,74],$Vr=[1,75],$Vs=[1,80],$Vt=[9,29,31,32],$Vu=[9,29,31,32,38,74,75,76,77,78,79,80,81,82,83,84,85,86,90,93,94,95],$Vv=[1,102],$Vw=[1,103],$Vx=[1,104],$Vy=[1,105],$Vz=[1,106],$VA=[1,107],$VB=[1,108],$VC=[1,109],$VD=[1,110],$VE=[1,111],$VF=[1,112],$VG=[1,113],$VH=[1,114],$VI=[1,115],$VJ=[9,29,31,38,74,75,76,77,78,79,80,81,82,83,84,85,86,90,94],$VK=[1,123],$VL=[1,124],$VM=[1,125],$VN=[1,126],$VO=[1,127],$VP=[29,38],$VQ=[1,162],$VR=[9,29,32,41],$VS=[9,29,31,38,74,75,79,80,81,82,83,84,85,86,90,94],$VT=[9,29,31,38,79,80,81,82,83,84,85,86,90,94],$VU=[9,29,31,38,83,84,85,86,90,94],$VV=[29,41],$VW=[1,185],$VX=[41,49,50],$VY=[1,222],$VZ=[5,27,30,34,35,36,43,45,51,52,53,59,60,61,62];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"BODY_MATRIOSHTS":3,"LISTA_CONTENIDO":4,"EOF":5,"TYPES":6,"SENTENCIA":7,"SENTENCIA_DECLARACION":8,"s_dot_coma":9,"SENTENCIA_ASIGNACION":10,"SENTENCIA_IF":11,"SENTENCIA_SWITCH":12,"SENTENCIA_WHILE":13,"SENTENCIA_DO_WHILE":14,"SENTENCIA_FOR":15,"SENTENCIA_FOR_LIST":16,"SENTENCIA_LLAMADA":17,"SENTENCIA_ACCESO":18,"SENTENCIA_BREAK":19,"SENTENCIA_CONTINUE":20,"SENTENCIA_RETURN":21,"TIPO":22,"r_void":23,"r_nulo":24,"r_boolean":25,"r_number":26,"identificador":27,"LISTA_IDENTIFICADORES":28,"s_coma":29,"r_var":30,"s_doble_dot":31,"s_asign":32,"EXPRESION":33,"r_let":34,"r_const":35,"r_if":36,"s_par_open":37,"s_par_close":38,"s_key_open":39,"LISTA_SENTENCIAS":40,"s_key_close":41,"LISTA_ELSE_IF":42,"r_else":43,"SENTENCIA_ELSE_IF":44,"r_switch":45,"LISTA_CASOS":46,"DEFECTO":47,"CASO":48,"r_case":49,"r_default":50,"r_while":51,"r_do":52,"r_for":53,"let":54,"r_in":55,"identidicador":56,"identificdor":57,"r_of":58,"r_break":59,"r_continue":60,"r_return":61,"r_type":62,"LISTA_ATRIBUTOS":63,"ATRIBUTO":64,"LISTA_EXPRESIONES":65,"EXPRESION_ARITMETICA":66,"EXPRESION_RELACIONAL":67,"EXPRESION_LOGICA":68,"OPERADOR_UNARIO":69,"OPERADOR_INCREMENTO":70,"OPERADOR_DECREMENTO":71,"OPERADOR_TERNARIO":72,"DATO_PRIMITIVO":73,"s_plus":74,"s_minus":75,"s_mul":76,"s_div":77,"s_mod":78,"s_greather":79,"s_less":80,"s_greather_equal":81,"s_less_equal":82,"s_equal":83,"s_not_equal":84,"s_or":85,"s_and":86,"s_not":87,"s_increment":88,"s_decrement":89,"s_ternario":90,"LISTA_ACCESOS":91,"ACCESO":92,"s_cor_open":93,"s_cor_close":94,"s_dot":95,"nulo":96,"boolean":97,"number":98,"string":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"s_dot_coma",23:"r_void",24:"r_nulo",25:"r_boolean",26:"r_number",27:"identificador",29:"s_coma",30:"r_var",31:"s_doble_dot",32:"s_asign",34:"r_let",35:"r_const",36:"r_if",37:"s_par_open",38:"s_par_close",39:"s_key_open",40:"LISTA_SENTENCIAS",41:"s_key_close",43:"r_else",45:"r_switch",49:"r_case",50:"r_default",51:"r_while",52:"r_do",53:"r_for",54:"let",55:"r_in",56:"identidicador",57:"identificdor",58:"r_of",59:"r_break",60:"r_continue",61:"r_return",62:"r_type",74:"s_plus",75:"s_minus",76:"s_mul",77:"s_div",78:"s_mod",79:"s_greather",80:"s_less",81:"s_greather_equal",82:"s_less_equal",83:"s_equal",84:"s_not_equal",85:"s_or",86:"s_and",87:"s_not",88:"s_increment",89:"s_decrement",90:"s_ternario",93:"s_cor_open",94:"s_cor_close",95:"s_dot",96:"nulo",97:"boolean",98:"number",99:"string"},
productions_: [0,[3,2],[4,2],[4,2],[4,1],[4,1],[7,2],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,2],[7,2],[22,1],[22,1],[22,1],[22,1],[22,1],[28,3],[28,1],[8,6],[8,4],[8,4],[8,2],[8,6],[8,4],[8,4],[8,2],[8,6],[8,4],[10,3],[10,3],[11,12],[11,11],[11,8],[11,7],[42,2],[42,1],[44,8],[12,8],[12,7],[46,2],[46,1],[48,4],[47,3],[13,7],[14,8],[15,11],[15,11],[16,10],[16,10],[19,1],[20,1],[21,2],[21,1],[6,7],[63,3],[63,1],[64,3],[65,3],[65,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,3],[33,1],[33,1],[66,3],[66,3],[66,3],[66,3],[66,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[68,3],[68,3],[68,2],[69,2],[70,2],[71,2],[72,5],[18,2],[91,2],[91,1],[92,3],[92,2],[92,2],[17,4],[17,3],[73,1],[73,1],[73,1],[73,1],[73,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 3: case 42: case 47:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
      
break;
case 4: case 5: case 43: case 48: case 66:

        this.$ = [$$[$0]];
      
break;
case 6: case 7: case 14: case 15: case 16: case 17: case 18: case 74:
this.$ = $$[$0-1];
break;
case 8: case 9: case 10: case 11: case 12: case 13: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 75: case 76:
this.$ = $$[$0];
break;
case 19:
this.$ = {etiqueta: 'tipo', tipo: 0, valor: $$[$0]};
break;
case 20:
this.$ = {etiqueta: 'tipo', tipo: 1, valor: $$[$0]};
break;
case 21:
this.$ = {etiqueta: 'tipo', tipo: 2, valor: $$[$0]};
break;
case 22:
this.$ = {etiqueta: 'tipo', tipo: 3, valor: $$[$0]};
break;
case 23:

        if($$[$0].toLowerCase() == "String")
        {
          this.$ = {etiqueta: 'tipo', tipo: 4, valor: $$[$0]};
        }
        else
        {
          this.$ = {etiqueta: 'tipo', tipo: 5, valor: $$[$0]};
        }
      
break;
case 24:
 
        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
      
break;
case 25:
 this.$ = [$$[$0]];
break;
case 26: case 30:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-4], tipo: $$[$0-2], valor: $$[$0]};
      
break;
case 27:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: $$[$0], valor: null};      
      
break;
case 28:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: null, valor: $$[$0]};
      
break;
case 29: case 33:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0], tipo: null, valor: null};
      
break;
case 31:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: $$[$0], valor: null};
      
break;
case 32:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: false, identificador: $$[$0-2], tipo: null, valor: $$[$0]};
        this.$.setValor($$[$0]);
      
break;
case 34:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: true, identificador: $$[$0-4], tipo: $$[$0-2], valor: $$[$0]};      
      
break;
case 35:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_declaracion', linea: linea, columna: columna, constante: true, identificador: $$[$0-2], tipo: null, valor: $$[$0]};      
      
break;
case 36:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_asignacion', linea: linea, columna: columna, tipo: 0, acceso0: $$[$0-2], acceso1: null, valor: $$[$0]}; 
    
break;
case 37:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_asignacion', linea: linea, columna: columna, tipo: 1, acceso0: null, acceso1: $$[$0-2], valor: $$[$0]};
    
break;
case 38:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-9], sentencias1: $$[$0-6], lista_else_if: $$[$0-4], sentencias2: $$[$0-1]};
      
break;
case 39:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-8], sentencias1: $$[$0-5], lista_else_if: null, sentencias2: $$[$0-1]};
      
break;
case 40:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-5], sentencias1: $$[$0-2], lista_else_if: $$[$0], sentencias2: null};
      
break;
case 41:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion : $$[$0-4], sentencias1: $$[$0-1], lista_else_if: null, sentencias2: null};      
      
break;
case 44:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_if', linea: linea, columna: columna, condicion: $$[$0-4], sentencias1: $$[$0-1], lista_else_if: null, sentencias2: null};
      
break;
case 45:

        var linea = yylineno;
        var columna = yyleng;
        $$[$0-2].push($$[$0-1]);
        this.$ = {etiqueta: 'sentencia_switch', linea: linea, columna: columna, condicion: $$[$0-5], lista_casos: $$[$0-2]};
      
break;
case 46:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_switch', linea: linea, columna: columna, condicion: $$[$0-4], lista_casos: $$[$0-1]};
      
break;
case 49:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_caso', linea: linea, columna: columna, default: false, condicion : $$[$0-2], lista_sentencias: $$[$0]};
      
break;
case 50:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_caso', linea: linea, columna: columna, default: true, condicion : null, lista_sentencias: $$[$0]};
      
break;
case 51:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_while', linea: linea, columna: columna, condicion: $$[$0-4], sentencias: $$[$0-1]};
      
break;
case 52:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_do_while', linea: linea, columna: columna, condicion: $$[$0-1], sentencias: $$[$0-5]};
      
break;
case 53:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_for', linea: linea, columna: columna, sentencia1: $$[$0-8], sentencia2: $$[$0-6], sentencia3: $$[$0-4], lista_sentencias: $$[$0-1]};   
      
break;
case 54:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_for', linea: linea, columna: columna, sentencia1: $$[$0-8], sentencia2: $$[$0-6], sentencia3: $$[$0-4], lista_sentencias: $$[$0-1]};
      
break;
case 55:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_for_list', linea: linea, columna: columna, id1: $$[$0-6], id2: $$[$0-4], lista_sentencias: $$[$0-1]};   
      
break;
case 56:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_for_list', linea: linea, columna: columna, id1: $$[$0-7], id2: $$[$0-5], lista_sentencias: $$[$0-1]};
      
break;
case 57:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_break', linea: linea, columna: columna};
      
break;
case 58:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_continue', linea: linea, columna: columna};
      
break;
case 59:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_return', linea: linea, valor: $$[$0]};
      
break;
case 60:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'sentencia_return', linea: linea, valor: null};
      
break;
case 61:

      this.$ = {etiqueta: 'type', linea: linea, columna: columna, identificador: $$[$0-5], lista_atributos: $$[$0-2]};
    
break;
case 62:

      $$[$0-2].push($$[$0-1]);
      this.$ = $$[$0-2];
    
break;
case 63: case 97:

      this.$ = [$$[$0]];
    
break;
case 64:

      this.$ = {etiqueta: 'atributo', linea: linea, columna: columna, valor: $$[$0-2], tipo: $$[$0]};
    
break;
case 65:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
      
break;
case 77:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'suma', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 78:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'resta', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 79:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'multiplicacion', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 80:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'division', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 81:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'modulo', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 82:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'mayor_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 83:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'menor_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 84:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'mayor_igual_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 85:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'menor_igual_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 86:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'igual_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 87:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'diferente_que', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 88:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'or', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 89:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'and', linea: linea, columna: columna, expresion1: $$[$0-2], expresion2: $$[$0]};
      
break;
case 90:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'not', linea: linea, columna: columna, expresion1: $$[$0]};
      
break;
case 91:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'operador_urinario', linea: linea, columna: columna, expresion1: $$[$0]};
      
break;
case 92:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'operador_incremento', linea: linea, columna: columna, expresion1: {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 5, valor: $$[$0-1]}, valor: $$[$0-1]}};
      
break;
case 93:

        var linea = yylineno;
        var columna = yyleng; 
        this.$ = {etiqueta: 'operador_decremento', linea: linea, columna: columna, expresion1: {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 5, valor: $$[$0-1]}, valor: $$[$0-1]}};
      
break;
case 94:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: "operador_ternario", linea: linea, columna: columna, condicion: $$[$0-4] , expresion1: $$[$0-2], expresion2: $$[$0]};
    
break;
case 95:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_acceso', linea: linea, columna: columna, identificador: $$[$0-1], lista_acceso: $$[$0]};
    
break;
case 96:

      $$[$0-1].push($$[$0]);
      this.$ = $$[$0-1];
    
break;
case 98:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'tipo_acceso', linea: linea, columna: columna, tipo: 0, acceso0: $$[$0-1], acceso1: null, acceso2: null};
    
break;
case 99:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'tipo_acceso', linea: linea, columna: columna, tipo: 2, acceso0: null, acceso1: null, acceso2: $$[$0]};
    
break;
case 100:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'tipo_acceso', linea: linea, columna: columna, tipo: 1, acceso0: null, acceso1: $$[$0], acceso2: null};
    
break;
case 101:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_llamada', linea: linea, columna: columna, identificador: $$[$0-3], parametros: $$[$0-1]};
    
break;
case 102:

      var linea = yylineno;
      var columna = yyleng;
      this.$ = {etiqueta: 'sentencia_llamada', linea: linea, columna: columna, identificador: $$[$0-2], parametros: []};
    
break;
case 103:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 1, valor: $$[$0]}, valor: yytext}; 
      
break;
case 104:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 2, valor: $$[$0]}, valor: yytext}; 
      
break;
case 105:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 3, valor: $$[$0]}, valor: yytext};
      
break;
case 106:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 4, valor: $$[$0]}, valor:  yytext};
      
break;
case 107:

        var linea = yylineno;
        var columna = yyleng;
        this.$ = {etiqueta: 'dato_primitivo', linea: linea, columna: columna, tipo: {etiqueta: 'tipo', tipo: 5, valor: $$[$0]}, valor: yytext};
      
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,27:$V0,30:$V1,34:$V2,35:$V3,36:$V4,45:$V5,51:$V6,52:$V7,53:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},{1:[3]},{5:[1,31],6:32,7:33,8:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,27:$V0,30:$V1,34:$V2,35:$V3,36:$V4,45:$V5,51:$V6,52:$V7,53:$V8,59:$V9,60:$Va,61:$Vb,62:$Vc},o($Vd,[2,4]),o($Vd,[2,5]),{27:[1,34]},{9:[1,35]},{9:[1,36]},o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),{9:[1,37]},{9:[1,38],32:$Ve},{9:[1,40]},{9:[1,41]},{9:[1,42]},{27:$Vf,28:43},{27:$Vf,28:45},{27:$Vf,28:46},{32:$Vg,37:$Vh,91:49,92:50,93:$Vi,95:$Vj},{37:[1,53]},{37:[1,54]},{37:[1,55]},{39:[1,56]},{37:[1,57]},{9:[2,57]},{9:[2,58]},{9:[2,60],18:67,27:$Vk,33:58,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,3]),{32:[1,76]},o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,14]),o($Vd,[2,15]),{18:67,27:$Vk,33:77,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},o($Vd,[2,16]),o($Vd,[2,17]),o($Vd,[2,18]),{9:[2,29],29:$Vs,31:[1,78],32:[1,79]},o($Vt,[2,25]),{9:[2,33],29:$Vs,31:[1,81],32:[1,82]},{29:$Vs,31:[1,83],32:[1,84]},{18:67,27:$Vk,33:85,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:88,37:$Vl,38:[1,87],65:86,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},o([9,29,31,32,38,74,75,76,77,78,79,80,81,82,83,84,85,86,90,94],[2,95],{92:89,93:$Vi,95:$Vj}),o($Vu,[2,97]),{18:67,27:$Vk,33:90,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{17:91,27:[1,92]},{18:67,27:$Vk,33:93,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:94,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:95,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{40:[1,96]},{8:97,10:98,18:101,27:[1,100],30:$V1,34:$V2,35:$V3,54:[1,99]},{9:[2,59],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},o($VJ,[2,67]),o($VJ,[2,68]),o($VJ,[2,69]),o($VJ,[2,70]),o($VJ,[2,71]),o($VJ,[2,72]),o($VJ,[2,73]),{18:67,27:$Vk,33:116,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},o($VJ,[2,75]),o($VJ,[2,76]),{18:67,27:$Vk,33:117,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:118,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},o($VJ,[2,107],{91:49,92:50,88:[1,119],89:[1,120],93:$Vi,95:$Vj}),o($VJ,[2,103]),o($VJ,[2,104]),o($VJ,[2,105]),o($VJ,[2,106]),{39:[1,121]},{9:[2,37],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{22:122,23:$VK,24:$VL,25:$VM,26:$VN,27:$VO},{18:67,27:$Vk,33:128,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{27:[1,129]},{22:130,23:$VK,24:$VL,25:$VM,26:$VN,27:$VO},{18:67,27:$Vk,33:131,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{22:132,23:$VK,24:$VL,25:$VM,26:$VN,27:$VO},{18:67,27:$Vk,33:133,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{9:[2,36],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{29:[1,135],38:[1,134]},o($Vu,[2,102]),o($VP,[2,66],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI}),o($Vu,[2,96]),{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI,94:[1,136]},o($Vu,[2,99]),o($Vu,[2,100],{37:$Vh}),{38:[1,137],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{38:[1,138],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{38:[1,139],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{41:[1,140]},{9:[1,141]},{9:[1,142]},{27:[1,143],57:[1,144]},{32:$Vg,91:49,92:50,93:$Vi,95:$Vj},{32:$Ve},{18:67,27:$Vk,33:145,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:146,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:147,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:148,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:149,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:150,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:151,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:152,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:153,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:154,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:155,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:156,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:157,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:158,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{38:[1,159],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},o($VJ,[2,90]),o($VJ,[2,91]),o($VJ,[2,92]),o($VJ,[2,93]),{27:$VQ,63:160,64:161},{9:[2,27],32:[1,163]},o($VR,[2,19]),o($VR,[2,20]),o($VR,[2,21]),o($VR,[2,22]),o($VR,[2,23]),{9:[2,28],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},o($Vt,[2,24]),{9:[2,31],32:[1,164]},{9:[2,32],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{32:[1,165]},{9:[2,35],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},o($Vu,[2,101]),{18:67,27:$Vk,33:166,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},o($Vu,[2,98]),{39:[1,167]},{39:[1,168]},{39:[1,169]},{51:[1,170]},{18:67,27:$Vk,33:171,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:172,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{55:[1,173]},{58:[1,174]},o($VS,[2,77],{76:$Vx,77:$Vy,78:$Vz}),o($VS,[2,78],{76:$Vx,77:$Vy,78:$Vz}),o($VJ,[2,79]),o($VJ,[2,80]),o($VJ,[2,81]),o($VT,[2,82],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz}),o($VT,[2,83],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz}),o($VT,[2,84],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz}),o($VT,[2,85],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz}),o($VU,[2,86],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD}),o($VU,[2,87],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD}),o([9,29,31,38,85,90,94],[2,88],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,86:$VH}),o([9,29,31,38,85,86,90,94],[2,89],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF}),{31:[1,175],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},o($VJ,[2,74]),{29:[1,177],41:[1,176]},o($VV,[2,63]),{31:[1,178]},{18:67,27:$Vk,33:179,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:180,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:181,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},o($VP,[2,65],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI}),{40:[1,182]},{46:183,48:184,49:$VW},{40:[1,186]},{37:[1,187]},{9:[1,188],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{9:[1,189],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{56:[1,190]},{27:[1,191]},{18:67,27:$Vk,33:192,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{9:[1,193]},{27:$VQ,64:194},{22:195,23:$VK,24:$VL,25:$VM,26:$VN,27:$VO},{9:[2,26],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{9:[2,30],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{9:[2,34],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{41:[1,196]},{41:[1,198],47:197,48:199,49:$VW,50:[1,200]},o($VX,[2,48]),{18:67,27:$Vk,33:201,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{41:[1,202]},{18:67,27:$Vk,33:203,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:204,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{18:67,27:$Vk,33:205,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{38:[1,206]},{38:[1,207]},o([9,29,31,38,94],[2,94],{74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI}),o($Vd,[2,61]),o($VV,[2,62]),o($VV,[2,64]),o($Vd,[2,41],{42:208,44:210,43:[1,209]}),{41:[1,211]},o($Vd,[2,46]),o($VX,[2,47]),{31:[1,212]},{31:[1,213],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},o($Vd,[2,51]),{38:[1,214],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{38:[1,215],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{38:[1,216],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},{39:[1,217]},{39:[1,218]},o($Vd,[2,40],{44:220,43:[1,219]}),{36:$VY,39:[1,221]},o($VZ,[2,43]),o($Vd,[2,45]),{40:[1,223]},{40:[1,224]},o($Vd,[2,52]),{39:[1,225]},{39:[1,226]},{40:[1,227]},{40:[1,228]},{36:$VY,39:[1,229]},o($VZ,[2,42]),{40:[1,230]},{37:[1,231]},{41:[2,50]},o($VX,[2,49]),{40:[1,232]},{40:[1,233]},{41:[1,234]},{41:[1,235]},{40:[1,236]},{41:[1,237]},{18:67,27:$Vk,33:238,37:$Vl,66:59,67:60,68:61,69:62,70:63,71:64,72:65,73:68,75:$Vm,87:$Vn,96:$Vo,97:$Vp,98:$Vq,99:$Vr},{41:[1,239]},{41:[1,240]},o($Vd,[2,55]),o($Vd,[2,56]),{41:[1,241]},o($Vd,[2,39]),{38:[1,242],74:$Vv,75:$Vw,76:$Vx,77:$Vy,78:$Vz,79:$VA,80:$VB,81:$VC,82:$VD,83:$VE,84:$VF,85:$VG,86:$VH,90:$VI},o($Vd,[2,53]),o($Vd,[2,54]),o($Vd,[2,38]),{39:[1,243]},{40:[1,244]},{41:[1,245]},o($VZ,[2,44])],
defaultActions: {28:[2,57],29:[2,58],31:[2,1],223:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 'r_import'
break;
case 2:return 23
break;
case 3:return 25
break;
case 4:return 26
break;
case 5:return 'r_string'
break;
case 6:return 'r_public'
break;
case 7:return 'r_private'
break;
case 8:return 30
break;
case 9:return 34
break;
case 10:return 35
break;
case 11:return 62
break;
case 12:return 'r_function'
break;
case 13:return 36
break;
case 14:return 43
break;
case 15:return 45
break;
case 16:return 49
break;
case 17:return 50
break;
case 18:return 52
break;
case 19:return 51
break;
case 20:return 53
break;
case 21:return 55
break;
case 22:return 58
break;
case 23:return 60
break;
case 24:return 59
break;
case 25:return 61
break;
case 26:return 97
break;
case 27:return 97
break;
case 28:return 98
break;
case 29:return 99
break;
case 30:return 99
break;
case 31:return 96
break;
case 32:return 83
break;
case 33:return 32
break;
case 34:return 88
break;
case 35:return 89
break;
case 36:return 74
break;
case 37:return 75
break;
case 38:return 76
break;
case 39:return 77 
break;
case 40:return 78
break;
case 41:return 84
break;
case 42:return 82
break;
case 43:return 81
break;
case 44:return 80
break;
case 45:return 79
break;
case 46:return 85
break;
case 47:return 86
break;
case 48:return 87
break;
case 49:return 37
break;
case 50:return 38
break;
case 51:return 90
break;
case 52:return 39
break;
case 53:return 41
break;
case 54:return 93
break;
case 55:return 94
break;
case 56:return 95
break;
case 57:return 29
break;
case 58:return 31
break;
case 59:return 9
break;
case 60:return 27
break;
case 61:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:import\b)/,/^(?:void\b)/,/^(?:boolean\b)/,/^(?:number\b)/,/^(?:String\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:type\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:'[^"'"]*')/,/^(?:"[^"\""]*")/,/^(?:null\b)/,/^(?:==)/,/^(?:=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:([a-zA-ZñÑ]|(_[a-zA-ZñÑ]))([a-zA-ZñÑ]|_|[0-9])*)/,/^(?:$)/],
conditions: {"estado_cadena":{"rules":[],"inclusive":false},"estado_caracter":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar_MatrioshTS;
exports.Parser = Grammar_MatrioshTS.Parser;
exports.parse = function () { return Grammar_MatrioshTS.parse.apply(Grammar_MatrioshTS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}